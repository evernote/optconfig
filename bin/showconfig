#!/bin/bash
# /* Copyright 2010 Proofpoint, Inc. All rights reserved.
#    Copyright 2014 Evernote Corp. All rights reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# */

domain="$1"
lang=perl
shift 1

if echo $domain | grep -q /
then
   lang=$(echo $domain | cut -f2 -d/)
   domain=$(echo $domain | cut -f1 -d/)
fi

perlwhich()
{
   perl -l -Mppenv \
      -e 'use Getopt::Std; getopts("d",\%o);'                 \
      -e '$m = shift; $f = $m; $f =~ s{::}{/}g; $f .= ".pm";' \
      -e 'print join(":", @INC), "\n" if $o{"d"};'            \
      -e 'print "Checking for $f" if $o{"d"};'                \
      -e 'for $d (@INC) {'                                    \
      -e '   print "$0 checking $d" if $o{"d"};'              \
      -e '   if (-f "$d/$f") {'                               \
      -e '      print "$d/$f"; exit;'                         \
      -e '   }'                                               \
      -e '}'                                                  \
      -e 'print "No $m in (", join(":", @INC), ")";'   \
      -e 'exit(1);' -- $*
}

rubywhich()
{
   # This is somewhat easier than with perl
   ruby -rppenv \
      -e 'm = ARGV.shift + ".rb"'                           \
      -e '$LOAD_PATH.each { |d|'                            \
      -e '   if File.exist? File.join(d, m)'                \
      -e '      puts File.join(d, m)'                       \
      -e '      Process.exit(0)'                            \
      -e '   end'                                           \
      -e '}'                                                \
      -e 'puts "No #{m} in (" + $LOAD_PATH.join(":") + ")"' \
      -e 'Process.exit(1)' -- $*
}

if [ "$lang" = perl ]
then
   echo -n "Using "; PERLLIB=$PERLLIB:/usr/local perlwhich Optconfig
   PERLLIB=$PERLLIB:/usr/local perl -Mppenv -MOptconfig -MJSON \
      -e 'use vars qw($VERSION); $VERSION = "__VERSION__";' \
      -e 'my $domain = shift(@ARGV);' \
      -e 'my $spectext = shift(@ARGV);' \
      -e 'my $optspec = ($JSON::VERSION >= 2.0 ? from_json($spectext) : jsonToObj($spectext));' \
      -e 'my $opt = Optconfig->new($domain, $optspec);' \
      -e 'print(($JSON::VERSION >= 2.0 ? to_json($opt->hash) : objToJson($opt->hash)), "\n");' "$domain" "$@"
elif [ "$lang" = ruby ]
then
   echo -n "Using "; RUBYLIB=$RUBYLIB:/usr/local rubywhich optconfig
   ruby \
      -e '$LOAD_PATH.unshift("/usr/local")' \
      -e 'require "ppenv"' \
      -e 'require "optconfig"' \
      -e 'require "json"' \
      -e '$VERSION = "__VERSION__"' \
      -e 'domain = ARGV.shift' \
      -e 'optspec = JSON.load(ARGV.shift)' \
      -e 'opt = Optconfig.new(domain, optspec)' \
      -e 'puts opt.to_json' "$domain" "$@"
elif [ "$lang" = bash ]
then
   export PATH=/usr/local:$PATH
   . ppenv.sh
   echo -n "Using "; which optconfig.sh
   . optconfig.sh
   opt_new_gen $domain "$@"
else
   echo "Error: no Optconfig for language '$lang'" >&2
fi

:<<EOF
=head1 NAME

showconfig - Display the standard configuration resulting from given options

=head1 SYNOPSIS

   showconfig domain[/language] optspec [options]

=head1 DESCRIPTION

The standard Optconfig system provides a way to configure program execution
in the context specified by domain. Optionally the "perl" or "ruby" languages
can be specified to use those code paths.

The optspec is a JSON-serialized option specifier (see L<Optconfig>). Other
arguments are passed to the optconfig module (perl or ruby) to determine the
final configuration.

=head1 AUTHOR

Jeremy Brinkley, E<lt>jbrinkley@proofpoint.comE<gt>

=cut
EOF
